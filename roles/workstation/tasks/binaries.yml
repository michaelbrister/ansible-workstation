---
###################
# Install terraform
###################

- name: terraform | Create Terraform directory
  ansible.builtin.file:
    path: "{{ terraform_path }}"
    state: directory
  tags:
    - terraform

- name: terraform | Create Terraform version directory
  ansible.builtin.file:
    path: "{{ terraform_version_dir }}"
    state: directory
  tags:
    - terraform

- name: terraform | Check if terraform binary exists
  ansible.builtin.stat:
    path: "{{ terraform_version_bin }}"
  register: terraform_bin_st
  check_mode: false
  tags:
    - terraform

- name: terraform | Download Terraform release
  ansible.builtin.get_url:
    url: "{{ terraform_url }}"
    dest: "{{ terraform_version_dir }}/{{ terraform_file }}"
    checksum: "{{ terraform_checksum }}"
  when: not terraform_bin_st.stat.exists and not ansible_check_mode
  tags:
    - terraform

- name: terraform | Extract Terraform binary
  ansible.builtin.unarchive:
    src: "{{ terraform_version_dir }}/{{ terraform_file }}"
    dest: "{{ terraform_version_dir }}"
    creates: "{{ terraform_version_bin }}"
  when: not terraform_bin_st.stat.exists and not ansible_check_mode
  tags:
    - terraform

- name: terraform | Cleanup
  ansible.builtin.file:
    path: "{{ terraform_version_dir }}/{{ terraform_file }}"
    state: absent
  tags:
    - terraform

- name: terraform | Symlink terraform to /usr/local/bin
  ansible.builtin.file:
    src: "{{ terraform_version_bin }}"
    dest: "{{ terraform_bin }}"
    state: link
  when: not ansible_check_mode
  tags:
    - terraform

- name: terraform | Cleanup legacy binaries
  ansible.builtin.file:
    path: "{{ terraform_path }}/terraform"
    state: absent
  tags:
    - terraform

- name: terraform | Check Terraform binary version
  ansible.builtin.shell: "set -o pipefail && terraform --version | grep '^Terraform v'"
  args:
    executable: /bin/bash
  register: terraform_bin_version
  changed_when: false
  check_mode: false
  when: not ansible_check_mode
  tags:
    - terraform

- name: terraform | Terraform version
  ansible.builtin.set_fact:
    terraform_installed_version: "{{ terraform_bin_version.stdout | replace('Terraform v', '') }}"
  when: not ansible_check_mode
  tags:
    - terraform

- name: terraform | Check that Terraform version is installed correctly
  ansible.builtin.assert:
    that: "terraform_installed_version == terraform_version"
  when: not ansible_check_mode
  tags:
    - terraform

####################
# Install terragrunt
####################

- name: terragrunt | Check if terraform binary exists
  ansible.builtin.stat:
    path: "/usr/local/bin/terragrunt"
  register: terragrunt_bin_st
  check_mode: false
  tags:
    - terragrunt

- name: terragrunt | Download Terragrunt release
  ansible.builtin.get_url:
    url: "{{ terragrunt_url }}"
    dest: "/usr/local/bin/terragrunt"
    checksum: "{{ terragrunt_checksum }}"
  when: not terragrunt_bin_st.stat.exists
  tags:
    - terragrunt

- name: terragrunt | set permissions
  ansible.builtin.file:
    path: "/usr/local/bin/terragrunt"
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
    mode: "755"
  tags:
    - terragrunt

- name: terragrunt | Check binary version
  ansible.builtin.shell: "terragrunt --version | cut -d ' ' -f3"
  args:
    executable: /bin/bash
  register: terragrunt_bin_version
  changed_when: false
  check_mode: false
  tags:
    - terragrunt

- name: terragrunt | Terragrunt version
  ansible.builtin.set_fact:
    terragrunt_installed_version: "{{ terragrunt_bin_version.stdout | replace('v', '') }}"
  tags:
    - terragrunt

- name: check terragrunt version
  ansible.builtin.debug:
    msg:
      - "Current terragrunt version {{ terragrunt_version }}"
      - "Desired terragrunt version {{ terragrunt_installed_version }}"
  tags:
    - terragrunt

- name: terragrunt | Check that Terragrunt version is installed correctly
  ansible.builtin.assert:
    that: "terragrunt_installed_version == terragrunt_version"
  when: not ansible_check_mode
  tags:
    - terragrunt

###################
# Install golang
###################

- name: Register the current Go version (if any)
  ansible.builtin.shell: "{{ golang_install_directory }}/go/bin/go version | cut -d ' ' -f3"
  ignore_errors: true
  register: golang_current_version
  changed_when: false
  check_mode: false
  tags:
    - golang

- name: "Check golang version"
  ansible.builtin.debug:
    msg:
      - "Current golang version is {{ golang_current_version.stdout }}"
      - "Desired golang version is {{ golang_version }}"
  tags:
    - golang

- block:
    - name: Delete old golang version
      ansible.builtin.file:
        path: "{{ golang_install_directory}}/go"
        state: absent

    - name: Install golang
      ansible.builtin.get_url:
        url: "{{ golang_url }}"
        dest: "{{ golang_install_directory }}"
        mode: "755"

    - name: Linux | Extract golang binary
      ansible.builtin.unarchive:
        src: "{{ golang_install_directory }}/{{ golang_file }}"
        dest: "{{ golang_install_directory }}"
      when: not ansible_check_mode

    - name: Golang cleanup
      ansible.builtin.file:
        path: "{{ golang_install_directory }}/{{ golang_file }}"
        state: absent
  when: golang_current_version.stdout != golang_version
  tags:
    - golang

###################
# Install helm
###################
- name: helm | Register the current version (if any)
  ansible.builtin.shell: '/usr/local/bin/helm version | cut -d ''"'' -f 2'
  ignore_errors: true
  register: helm_current_version
  check_mode: false
  tags:
    - helm

- name: "Check helm version"
  ansible.builtin.debug:
    msg:
      - "Current helm version is {{ helm_current_version.stdout }}"
      - "Desired helm version is {{ helm_version }}"
  tags:
    - helm

- block:
    - name: helm | Download
      ansible.builtin.get_url:
        url: "{{ helm_url }}"
        dest: /tmp/{{ helm_file }}
        mode: "755"
      tags:
        - helm

    - name: helm | Extract helm binary
      ansible.builtin.unarchive:
        src: "/tmp/{{ helm_file }}"
        dest: "/tmp/"
        creates: "/tmp/{{ helm_arch }}"
      when: not ansible_check_mode
      tags:
        - helm

    - name: helm | copy file
      ansible.builtin.copy:
        src: "{{ helm_folder }}/helm"
        dest: "/usr/local/bin/helm"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        mode: "755"
      when: not ansible_check_mode
      tags:
        - helm

    - name: helm | Cleanup
      ansible.builtin.file:
        path: "/tmp/{{ helm_file }}"
        state: absent
      tags:
        - helm

    - name: helm | folder Cleanup
      ansible.builtin.file:
        path: "/tmp/{{ helm_arch }}"
        state: absent
      tags:
        - helm
  when: helm_current_version.stdout != helm_version

###################
# Install helmfile
###################
- name: helmfile | Register the current version (if any)
  ansible.builtin.shell: "/usr/local/bin/helmfile --version | cut -d ' ' -f 3"
  ignore_errors: true
  register: helmfile_current_version
  changed_when: false
  check_mode: false
  tags:
    - helmfile

- name: "Check helmfile version"
  ansible.builtin.debug:
    msg:
      - "Current helmfile version is {{ helmfile_current_version.stdout }}"
      - "Desired helmfile version is {{ helmfile_version }}"
  tags:
    - helmfile

- block:
    - name: helmfile | Download
      ansible.builtin.get_url:
        url: "{{ helmfile_url }}"
        dest: /tmp/{{ helmfile_file }}
        mode: "755"
      tags:
        - helmfile

    - name: helmfile | copy file
      ansible.builtin.copy:
        src: "{{ helmfile_folder }}/{{ helmfile_file }}"
        dest: "/usr/local/bin/helmfile"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        mode: "755"
      tags:
        - helmfile

    - name: helmfile | Cleanup
      ansible.builtin.file:
        path: "/tmp/{{ helmfile_file }}"
        state: absent
      tags:
        - helmfile
  when: helmfile_current_version.stdout != helmfile_version and not ansible_check_mode

##################
# Install neovim
##################

- name: Create neovim config directory
  ansible.builtin.file:
    path: /home/{{ lookup('env', 'USER') }}/.config/nvim
    state: directory
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
    mode: "0775"
  tags:
    - neovim

###################
# Configure neovim
###################

- name: Copy init.vim
  ansible.builtin.copy:
    src: init.vim
    dest: /home/{{ lookup('env', 'USER') }}/.config/nvim/init.vim
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
    mode: "0664"
  tags:
    - neovim

- name: Install vim-plug
  ansible.builtin.shell: sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  tags:
    - neovim

- name: Install nvim plugins
  ansible.builtin.shell: nvim +PlugInstall --sync +qall &> /dev/null < /dev/tty
  tags:
    - neovim

###################
# Install zshrc
###################

- name: Copy zshrc
  ansible.builtin.copy:
    src: zshrc
    dest: /home/{{ lookup('env', 'USER') }}/.zshrc
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
    mode: "0644"
  tags:
    - neovim
