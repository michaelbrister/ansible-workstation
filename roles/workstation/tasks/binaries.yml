---

###################
# Install terraform
###################

- name: terraform | Create Terraform directory
  file:
    path: "{{ terraform_path }}"
    state: directory
  tags:
    - terraform

- name: terraform | Create Terraform version directory
  file:
    path: "{{ terraform_version_dir }}"
    state: directory
  tags:
    - terraform

- name: terraform | Check if terraform binary exists
  stat:
    path: "{{ terraform_version_bin }}"
  register: terraform_bin_st
  tags:
    - terraform

- name: terraform | Download Terraform release
  get_url:
    url: "{{ terraform_url }}"
    dest: "{{ terraform_version_dir }}/{{ terraform_file }}"
    checksum: "{{ terraform_checksum }}"
  when: not terraform_bin_st.stat.exists
  tags:
    - terraform

- name: terraform | Extract Terraform binary
  unarchive:
    src: "{{ terraform_version_dir }}/{{ terraform_file }}"
    dest: "{{ terraform_version_dir }}"
    creates: "{{ terraform_version_bin }}"
  when: not terraform_bin_st.stat.exists
  tags:
    - terraform

- name: terraform | Cleanup
  file:
    path: "{{ terraform_version_dir }}/{{ terraform_file }}"
    state: absent
  tags:
    - terraform

- name: terraform | Symlink terraform to /usr/local/bin
  file:
    src: "{{ terraform_version_bin }}"
    dest: "{{ terraform_bin }}"
    state: link
  tags:
    - terraform

- name: terraform | Cleanup legacy binaries
  file:
    path: "{{ terraform_path }}/terraform"
    state: absent
  tags:
    - terraform

- name: terraform | Check Terraform binary version
  shell: "set -o pipefail && terraform --version | grep '^Terraform v'"
  args:
    executable: /bin/bash
  register: terraform_bin_version
  changed_when: false
  tags:
    - terraform

- name: terraform | Terraform version
  set_fact:
    terraform_installed_version: "{{ terraform_bin_version.stdout | replace('Terraform v', '') }}"
  tags:
    - terraform

- name: terraform | Check that Terraform version is installed correctly
  assert:
    that: "terraform_installed_version == terraform_version"
  tags:
    - terraform

####################
# Install terragrunt
####################

- name: terragrunt | Check if terraform binary exists
  stat:
    path: "/usr/local/bin/terragrunt"
  register: terragrunt_bin_st
  tags:
    - terragrunt

- name: terragrunt | Download Terragrunt release
  get_url:
    url: "{{ terragrunt_url }}"
    dest: "/usr/local/bin/terragrunt"
    checksum: "{{ terragrunt_checksum }}"
  when: not terragrunt_bin_st.stat.exists
  tags:
    - terragrunt

- name: terragrunt | set permissions
  file:
    path: "/usr/local/bin/terragrunt"
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
    mode: '755'
  tags:
    - terragrunt

- name: terragrunt | Check binary version
  shell: "terragrunt --version | cut -d ' ' -f3"
  args:
    executable: /bin/bash
  register: terragrunt_bin_version
  changed_when: false
  tags:
    - terragrunt

- name: terragrunt | Terragrunt version
  set_fact:
    terragrunt_installed_version: "{{ terragrunt_bin_version.stdout | replace('v', '') }}"
  tags:
    - terragrunt

- name: check terragrunt version
  debug:
    msg:
      - "Current terragrunt version {{ terragrunt_version }}"
      - "Desired terragrunt version {{ terragrunt_installed_version }}"
  tags:
    - terragrunt

- name: terragrunt | Check that Terragrunt version is installed correctly
  assert:
    that: "terragrunt_installed_version == terragrunt_version"
  tags:
    - terragrunt

###################
# Install golang
###################

- name: Register the current Go version (if any)
  shell: "{{ golang_install_directory }}/go/bin/go version | cut -d ' ' -f3"
  ignore_errors: yes
  register: golang_current_version
  changed_when: false

- name: "Check golang version"
  debug:
    msg:
      - "Current golang version is {{ golang_current_version.stdout }}"
      - "Desired golang version is {{ golang_version }}"

- block:
  - name: install - delete old version
    file:
      path: "{{ golang_install_directory}}/go"
      state: absent

  - name: Install golang
    get_url:
      url: "{{ golang_url }}"
      dest: "{{ golang_install_directory }}"
      mode: '755'
    tags:
      - golang

  - name: Linux | Extract golang binary
    unarchive:
      src: "{{ golang_install_directory }}/{{ golang_file }}"
      dest: "{{ golang_install_directory }}"
    tags:
      - golang

  - name: Golang cleanup
    file:
      path: "{{ golang_install_directory }}/{{ golang_file }}"
      state: absent
    tags:
      - golang
  when: golang_current_version.stdout != golang_version

###################
# Install helm
###################
- name: helm | Register the current version (if any)
  shell: "/usr/local/bin/helm version | cut -d '\"' -f 2"
  ignore_errors: yes
  register: helm_current_version
  changed_when: false
  tags:
    - helm

- name: "Check helm version"
  debug:
    msg:
      - "Current helm version is {{ helm_current_version.stdout }}"
      - "Desired helm version is {{ helm_version }}"
  tags:
    - helm

- block:
  - name: helm | Download
    get_url:
      url: "{{ helm_url }}"
      dest: /tmp/{{ helm_file }}
      mode: '755'
    tags:
      - helm

  - name: helm | Extract helm binary
    unarchive:
      src: "/tmp/{{ helm_file }}"
      dest: "/tmp/"
      creates: "/tmp/{{ helm_arch }}"
    tags:
      - helm

  - name: helm | copy file
    copy:
      src: "{{ helm_folder }}/helm"
      dest: "/usr/local/bin/helm"
      owner: "{{ lookup('env', 'USER') }}"
      group: "{{ lookup('env', 'USER') }}"
      mode: '755'
    tags:
      - helm

  - name: helm | Cleanup
    file:
      path: "/tmp/{{ helm_file }}"
      state: absent
    tags:
      - helm

  - name: helm | folder Cleanup
    file:
      path: "/tmp/{{ helm_arch }}"
      state: absent
    tags:
      - helm
  when: helm_current_version.stdout != helm_version

###################
# Install helmfile
###################
- name: helmfile | Register the current version (if any)
  shell: "/usr/local/bin/helmfile version | cut -d ' ' -f 3"
  ignore_errors: yes
  register: helmfile_current_version
  changed_when: false
  tags:
    - helmfile

- name: "Check helmfile version"
  debug:
    msg:
      - "Current helmfile version is {{ helmfile_current_version.stdout }}"
      - "Desired helmfile version is {{ helmfile_version }}"
  tags:
    - helmfile

- block:
  - name: helmfile | Download
    get_url:
      url: "{{ helmfile_url }}"
      dest: /tmp/{{ helmfile_file }}
      mode: '755'
    tags:
      - helmfile

  - name: helmfile | copy file
    copy:
      src: "{{ helmfile_folder }}/{{ helmfile_file }}"
      dest: "/usr/local/bin/helmfile"
      owner: "{{ lookup('env', 'USER') }}"
      group: "{{ lookup('env', 'USER') }}"
      mode: '755'
    tags:
      - helmfile

  - name: helmfile | Cleanup
    file:
      path: "/tmp/{{ helmfile_file }}"
      state: absent
    tags:
      - helmfile
  when: helmfile_current_version.stdout != helmfile_version


##################
# Install neovim
##################

- name: Create neovim config directory
  file:
    path: /home/{{ lookup('env', 'USER') }}/.config/nvim
    state: directory
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
    mode: '0775'
  tags:
    - neovim

###################
# Configure neovim
###################

- name: Copy init.vim
  copy:
    src: init.vim
    dest: /home/{{ lookup('env', 'USER') }}/.config/nvim/init.vim
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
    mode: '0664'
  tags:
    - neovim

- name: Install vim-plug
  shell: sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  tags:
    - neovim

- name: Install nvim plugins
  shell: nvim +PlugInstall --sync +qall &> /dev/null < /dev/tty
  tags:
    - neovim

##################################
# Install stern - kubernetes logs
##################################
- name: stern | Register the current version (if any)
  shell: "/usr/local/bin/stern --version | cut -d ' ' -f 3"
  ignore_errors: yes
  register: stern_current_version
  changed_when: false
  tags:
    - stern

- name: "Check stern version"
  debug:
    msg:
      - "Current stern version is {{ stern_current_version.stdout }}"
      - "Desired stern version is {{ stern_version }}"
  tags:
    - stern

- block:
  - name: stern | Download
    get_url:
      url: https://github.com/wercker/stern/releases/download/{{ stern_version }}/stern_linux_amd64
      dest: /usr/local/bin/stern
      mode: '755'
    tags:
      - stern

  - name: Set stern permissions
    file:
        path: /usr/local/bin/stern
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        mode: '0755'
    tags:
      - stern
  when: stern_current_version.stdout != stern_version
